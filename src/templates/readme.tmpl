{{- define "readme" -}}
# {{ ModuleName }}

```
{{ template "noedit" . -}}
```

## Contents

- [Regenerating](#regenerating)
- [Entities](#entities)
- [Repository](#repository)
- [SQL Scripts](#sql-scripts)

## Regenerating

The code was generated using NearGothic via the following command:

``` sh
cd {{ CurrentFolder }}
{{ CommandLine }}
```

- If repeating these commands, please ensure the folders used match your own system
- Existing code should also be copied or committed to source control first
  - This lets you easily revert things if you need to

## Entities

| Struct | Table | Display | JSON | Slug |
| --- | --- | --- | --- | --- |
{{- range .Tables }}
| [`{{ .CodeName }}`](./entities/{{ .SlugName }}.go) | {{ .TableName }} | *{{ .DisplayName }}* | {{ .JsonName }} | {{ .SlugName }} |
{{- end }}

Each entity also has methods to:
- convert a database row into an instance of the entity
- create an instance with the content of HTTP POST form variables
- perform validation checks against field lengths

## Repository

- Each entity has a repository *struct*
- They are named according to a pattern, e.g. `CustomerRepo`
- They also have a constructor, e.g. `NewCustomerRepo()`
- They have CRUD methods for `List`, `Insert`, `Update`, and `Delete`
- They have general purpose methods for maximum rows and/or paging
  - `WithLimit` adds a restriction on the number of items returned
      - Overrides the package's `MaxRows` value (for this instance only)
  - `WithOffset` enables skipping the given number of items in the result set
- They have Methods for indexed fields
  - Each indexed field gets its own set of filters/sorting
    - Multiple filters and sorts can be applied at once
    - Strongly-typed filter per field (e.g. `WhereEntryCount`)
    - Strongly-typed sorting per field
      - Ascending, e.g. `SortByEntryCount()`
      - Descending, e.g. `ReverseByEntryCount()`
  - General purpose sorting and filtering (only intended for *unindexed* column usage)
    - `Where` adds a clause to the request
    - `AddSorting` adds an ad-hoc sort by any valid column/thing

## SQL Scripts

A PostgreSQL script containing SQL (to generate the entities in this repo) is also included.

This is an emergency-use script and *does not* obviate the need for proper precautions/backups.
In particular, it only contains the information extracted to generate the entities/repos.
Any other information outside of that usage will not have been persisted.

[The script is in the `postgres.sql` file](./postgres.sql).
{{ end -}}
